apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: petstore-api
  description: Petstore API
spec:
  type: openapi
  lifecycle: production
  owner: petstore-team
  system: store-engagement-portal
  definition: |
    components:
      schemas:
        ApiResponse:
          properties:
            code:
              format: int32
              type: integer
            message:
              type: string
            type:
              type: string
          type: object
        Category:
          properties:
            id:
              format: int64
              type: integer
            name:
              type: string
          type: object
          xml:
            name: Category
        Order:
          properties:
            complete:
              type: boolean
            id:
              format: int64
              type: integer
            petId:
              format: int64
              type: integer
            quantity:
              format: int32
              type: integer
            shipDate:
              format: date-time
              type: string
            status:
              description: Order Status
              enum:
              - placed
              - approved
              - delivered
              type: string
          type: object
          xml:
            name: Order
        Pet:
          properties:
            category:
              "$ref": "#/components/schemas/Category"
            id:
              format: int64
              type: integer
            name:
              example: doggie
              type: string
            photoUrls:
              items:
                type: string
                xml:
                  name: photoUrl
              type: array
              xml:
                wrapped: true
            status:
              description: pet status in the store
              enum:
              - available
              - pending
              - sold
              type: string
            tags:
              items:
                "$ref": "#/components/schemas/Tag"
              type: array
              xml:
                wrapped: true
          required:
          - name
          - photoUrls
          type: object
          xml:
            name: Pet
        Tag:
          properties:
            id:
              format: int64
              type: integer
            name:
              type: string
          type: object
          xml:
            name: Tag
        User:
          properties:
            email:
              type: string
            firstName:
              type: string
            id:
              format: int64
              type: integer
            lastName:
              type: string
            password:
              type: string
            phone:
              type: string
            userStatus:
              description: User Status
              format: int32
              type: integer
            username:
              type: string
          type: object
          xml:
            name: User
      securitySchemes:
        api-key:
          in: header
          name: api-key
          type: apiKey
        api_key:
          in: header
          name: api_key
          type: apiKey
        petstore_auth:
          flows:
            implicit:
              authorizationUrl: https://petstore.swagger.io/oauth/authorize
              scopes:
                read:pets: read your pets
                write:pets: modify pets in your account
          type: oauth2
    info:
      contact: {}
      description: Totally awesome API for all things pets!
      title: Petstore REST API
      version: 3.1.0
    openapi: 3.0.0
    paths:
      "/petstore/pet":
        post:
          operationId: addPet
          requestBody:
            content:
              application/json:
                schema:
                  "$ref": "#/components/schemas/Pet"
              application/xml:
                schema:
                  "$ref": "#/components/schemas/Pet"
            description: Pet object that needs to be added to the store
            required: true
            x-originalParamName: body
          responses:
            '401':
              description: Unauthorized request.
            '403':
              description: Forbidden request.
            '405':
              description: Invalid input
            '429':
              description: Too many requests. Please try again later.
          security:
          - petstore_auth:
            - write:pets
            - read:pets
          - api-key: []
          summary: Add a new pet to the store
          tags:
          - pet
        put:
          operationId: updatePet
          requestBody:
            content:
              application/json:
                schema:
                  "$ref": "#/components/schemas/Pet"
              application/xml:
                schema:
                  "$ref": "#/components/schemas/Pet"
            description: Pet object that needs to be added to the store
            required: true
            x-originalParamName: body
          responses:
            '400':
              description: Invalid ID supplied
            '401':
              description: Unauthorized request.
            '403':
              description: Forbidden request.
            '404':
              description: Pet not found
            '405':
              description: Validation exception
            '429':
              description: Too many requests. Please try again later.
          security:
          - petstore_auth:
            - write:pets
            - read:pets
          - api-key: []
          summary: Update an existing pet
          tags:
          - pet
      "/petstore/pet/{petId}":
        delete:
          operationId: deletePet
          parameters:
          - in: header
            name: api_key
            schema:
              type: string
          - description: Pet id to delete
            in: path
            name: petId
            required: true
            schema:
              format: int64
              type: integer
          responses:
            '400':
              description: Invalid ID supplied
            '401':
              description: Unauthorized request.
            '403':
              description: Forbidden request.
            '404':
              description: Pet not found
            '429':
              description: Too many requests. Please try again later.
          security:
          - petstore_auth:
            - write:pets
            - read:pets
          - api-key: []
          summary: Deletes a pet
          tags:
          - pet
        get:
          description: Returns a single pet
          operationId: getPetById
          parameters:
          - description: ID of pet to return
            in: path
            name: petId
            required: true
            schema:
              format: int64
              type: integer
          responses:
            '200':
              content:
                application/json:
                  schema:
                    "$ref": "#/components/schemas/Pet"
                application/xml:
                  schema:
                    "$ref": "#/components/schemas/Pet"
              description: successful operation
            '400':
              description: Invalid ID supplied
            '401':
              description: Unauthorized request.
            '403':
              description: Forbidden request.
            '404':
              description: Pet not found
            '429':
              description: Too many requests. Please try again later.
          security:
          - api_key: []
          - api-key: []
          summary: Find pet by ID
          tags:
          - pet
        post:
          operationId: updatePetWithForm
          parameters:
          - description: ID of pet that needs to be updated
            in: path
            name: petId
            required: true
            schema:
              format: int64
              type: integer
          requestBody:
            content:
              application/x-www-form-urlencoded:
                schema:
                  properties:
                    name:
                      description: Updated name of the pet
                      type: string
                      x-formData-name: name
                    status:
                      description: Updated status of the pet
                      type: string
                      x-formData-name: status
                  type: object
          responses:
            '401':
              description: Unauthorized request.
            '403':
              description: Forbidden request.
            '405':
              description: Invalid input
            '429':
              description: Too many requests. Please try again later.
          security:
          - petstore_auth:
            - write:pets
            - read:pets
          - api-key: []
          summary: Updates a pet in the store with form data
          tags:
          - pet
      "/petstore/store/order":
        post:
          operationId: placeOrder
          requestBody:
            content:
              application/json:
                schema:
                  "$ref": "#/components/schemas/Order"
            description: order placed for purchasing the pet
            required: true
            x-originalParamName: body
          responses:
            '200':
              content:
                application/json:
                  schema:
                    "$ref": "#/components/schemas/Order"
                application/xml:
                  schema:
                    "$ref": "#/components/schemas/Order"
              description: successful operation
            '400':
              description: Invalid Order
          summary: Place an order for a pet
          tags:
          - store
      "/petstore/store/order/{orderId}":
        delete:
          description: For valid response try integer IDs with positive integer value.
            Negative or non-integer values will generate API errors
          operationId: deleteOrder
          parameters:
          - description: ID of the order that needs to be deleted
            in: path
            name: orderId
            required: true
            schema:
              format: int64
              minimum: 1
              type: integer
          responses:
            '400':
              description: Invalid ID supplied
            '404':
              description: Order not found
          summary: Delete purchase order by ID
          tags:
          - store
        get:
          description: For valid response try integer IDs with value >= 1 and <= 10. Other
            values will generated exceptions
          operationId: getOrderById
          parameters:
          - description: ID of pet that needs to be fetched
            in: path
            name: orderId
            required: true
            schema:
              format: int64
              maximum: 10
              minimum: 1
              type: integer
          responses:
            '200':
              content:
                application/json:
                  schema:
                    "$ref": "#/components/schemas/Order"
                application/xml:
                  schema:
                    "$ref": "#/components/schemas/Order"
              description: successful operation
            '400':
              description: Invalid ID supplied
            '404':
              description: Order not found
          summary: Find purchase order by ID
          tags:
          - store
      "/petstore/user":
        post:
          description: This can only be done by the logged in user.
          operationId: createUser
          requestBody:
            content:
              application/json:
                schema:
                  "$ref": "#/components/schemas/User"
            description: Created user object
            required: true
            x-originalParamName: body
          responses:
            default:
              description: successful operation
          summary: Create user
          tags:
          - user
      "/petstore/user/{username}":
        delete:
          description: This can only be done by the logged in user.
          operationId: deleteUser
          parameters:
          - description: The name that needs to be deleted
            in: path
            name: username
            required: true
            schema:
              type: string
          responses:
            '400':
              description: Invalid username supplied
            '404':
              description: User not found
          summary: Delete user
          tags:
          - user
        get:
          operationId: getUserByName
          parameters:
          - description: 'The name that needs to be fetched. Use user1 for testing. '
            in: path
            name: username
            required: true
            schema:
              type: string
          responses:
            '200':
              content:
                application/json:
                  schema:
                    "$ref": "#/components/schemas/User"
                application/xml:
                  schema:
                    "$ref": "#/components/schemas/User"
              description: successful operation
            '400':
              description: Invalid username supplied
            '404':
              description: User not found
          summary: Get user by user name
          tags:
          - user
        put:
          description: This can only be done by the logged in user.
          operationId: updateUser
          parameters:
          - description: name that need to be updated
            in: path
            name: username
            required: true
            schema:
              type: string
          requestBody:
            content:
              application/json:
                schema:
                  "$ref": "#/components/schemas/User"
            description: Updated user object
            required: true
            x-originalParamName: body
          responses:
            '400':
              description: Invalid user supplied
            '404':
              description: User not found
          summary: Updated user
          tags:
          - user
    servers:
    - url: http://api.example.com
    - url: https://api.example.com